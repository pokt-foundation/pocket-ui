#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const Listr = require('listr')
const { promisify } = require('util')
const SVGO = require('svgo')
const { default: svgr } = require('@svgr/core')

const readdir = promisify(fs.readdir)
const readFile = promisify(fs.readFile)
const writeFile = promisify(fs.writeFile)

const ICONS_PATH = path.join(__dirname, '../src/icons')
const DEVBOX_PATH = path.join(__dirname, '../devbox')

const SVGR_OPTIONS = {
  replaceAttrValues: { '#212B36': 'currentColor' },
  svgProps: { width: '{sizeValue}', height: '{sizeValue}' },
  template: (
    { template },
    opts,
    { imports, componentName, props, jsx, exports }
  ) => template.ast`${imports}
import useIconSize from '../icon-size'
import IconPropTypes from '../IconPropTypes'

function ${componentName}({ size, ...${props} }) {
  const sizeValue = useIconSize(size)
  return ${jsx}
}
${componentName}.propTypes = IconPropTypes

${exports}
`,
  titleProp: false,
  noSemi: true,
  plugins: ['@svgr/plugin-jsx', '@svgr/plugin-prettier'],
}

const SVGO_PLUGINS = [
  { cleanupAttrs: true },
  { removeDoctype: true },
  { removeXMLProcInst: true },
  { removeComments: true },
  { removeMetadata: true },
  { removeTitle: true },
  { removeDesc: { removeAry: true } },
  { removeUselessDefs: true },
  { removeEditorsNSData: true },
  { removeEmptyAttrs: true },
  { removeHiddenElems: true },
  { removeEmptyText: true },
  { removeEmptyContainers: true },
  { removeViewBox: false },
  { cleanupEnableBackground: true },
  { convertStyleToAttrs: true },
  { convertColors: true },
  { convertPathData: true },
  { convertTransform: true },
  { removeUnknownsAndDefaults: true },
  { removeNonInheritableGroupAttrs: true },
  { removeUselessStrokeAndFill: true },
  { removeUnusedNS: true },
  { cleanupIDs: true },
  { cleanupNumericValues: true },
  { moveElemsAttrsToGroup: true },
  { moveGroupAttrsToElems: true },
  { collapseGroups: true },
  { removeRasterImages: false },
  { mergePaths: true },
  { convertShapeToPath: true },
  { sortAttrs: true },
]

const svgo = new SVGO({ plugins: SVGO_PLUGINS })

const isSvgFile = name => name.endsWith('.svg')

const TERM_COLORS = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
}

async function componentFromSvg(componentName, content) {
  return svgr(content, SVGR_OPTIONS, { componentName })
}

function getComponentName(filename) {
  return (
    'Icon' +
    path
      .basename(filename, '.svg')
      .split('-')
      .map(v => v.slice(0, 1).toUpperCase() + v.slice(1))
      .join('')
  )
}

async function componentFromSvgFile(
  svgDir,
  componentsDir,
  filename,
  onTask = () => {}
) {
  const svgPath = path.join(svgDir, filename)
  const componentName = getComponentName(filename)
  const componentPath = path.join(componentsDir, `${componentName}.js`)

  onTask(`${componentName} − read SVG file…`)
  const svgContent = await readFile(svgPath, 'utf8')

  onTask(`${componentName} − optimize SVG file…`)
  const { data: optimizedSvgContent } = await svgo.optimize(svgContent)

  onTask(`${componentName} − create React component…`)
  const componentCode = await componentFromSvg(
    componentName,
    optimizedSvgContent
  )

  onTask(`${filename} − update files…`)
  await Promise.all([
    writeFile(svgPath, optimizedSvgContent),
    writeFile(componentPath, componentCode),
  ])

  onTask(componentName)
  return true
}

async function svgFilenames(svgDir) {
  return (await readdir(svgDir)).filter(isSvgFile)
}

async function updateIndex(svgFilenames, componentsDir) {
  await writeFile(
    path.join(componentsDir, 'index.js'),
    [
      '// Do not edit: this file is generated by scripts/generate-icons,',
      '// changes will be overwritten.',
      '',
    ]
      .concat(
        svgFilenames.map(filename => {
          const componentName = getComponentName(filename)
          return `export { default as ${componentName} } from './${componentName}'`
        })
      )
      .join('\n')
  )
  return true
}

const tasks = new Listr(
  [
    {
      title: 'Read icons directory',
      task: async ctx => {
        ctx.svgFilenames = await svgFilenames(ctx.svgDir)
        return true
      },
    },
    {
      title: 'Generate icon components',
      task: async (ctx, task) => {
        const statuses = [...ctx.svgFilenames].fill(false)

        const updateTitle = () => {
          task.title =
            `Generate icon components` +
            statuses
              .map(
                (done, index) =>
                  (index % 26 === 0 ? '\n   ' : '') +
                  (done ? TERM_COLORS.green : TERM_COLORS.yellow) +
                  '·'
              )
              .join('') +
            TERM_COLORS.reset
        }

        await Promise.all(
          ctx.svgFilenames.map((filename, index) =>
            componentFromSvgFile(ctx.svgDir, ctx.componentsDir, filename).then(
              () => {
                statuses[index] = true
                updateTitle()
              }
            )
          )
        )
        task.title = `Generate icon components`
        return true
      },
    },
    {
      title: 'Update index file',
      task: async ctx => updateIndex(ctx.svgFilenames, ctx.componentsDir),
    },
  ],
  { collapse: false }
)

tasks.run({
  svgDir: path.join(ICONS_PATH, 'svg'),
  componentsDir: path.join(ICONS_PATH, 'components'),
  devboxDir: path.join(DEVBOX_PATH),
})
